module Tables (nt,sigma,t0,m) where

t0Table = [(0.5,6400),(1.0,6790),(5.0,7150),(10,7270),(50,8010),(200,9185),(400,10010),(800,11140),(1200,12010)]

mTable =  [(0.5,0.4),(1.0,0.55),(5.0,1.7),(10,3.0),(50,11.0),(200,32.0),(400,40.0),(800,41.0),(1200,39.0)]

sigmaTable = [(5,[(2000,0.525e-3),(3000,0.525e-2),(4000,0.525e-1),(5000,0.442),(6000,0.283e1),(7000,0.741e1),(8000,0.138e2),(9000,0.220e2),(10000,0.317e2),(11000,0.428e2),(12000,0.547e2),(13000,0.664e2),(14000,0.769e2),(15000,0.861e2),(16000,0.941e2),(17000,0.102e3),(18000,0.112e3),(19000,0.126e3),(20000,0.149e3)]),
          (15,[(2000,0.309e-3),(3000,0.309e-2),(4000,0.309e-1),(5000,0.270e+0),(6000,0.205e1),(7000,0.606e1),(8000,0.120e2),(9000,0.199e2),(10000,0.296e2),(11000,0.411e2),(12000,0.541e2),(13000,0.677e2),(14000,0.815e2),(15000,0.938e2),(16000,0.105e3),(17000,0.115e3),(18000,0.124e3),(19000,0.135e3),(20000,0.150e3)]),
          (25,[(2000,0.239e-3),(3000,0.239e-2),(4000,0.239e-1),(5000,0.214e+0),(6000,0.175e1),(7000,0.545e1),(8000,0.111e2),(9000,0.188e2),(10000,0.284e2),(11000,0.399e2),(12000,0.533e2),(13000,0.677e2),(14000,0.825e2),(15000,0.965e2),(16000,0.109e3),(17000,0.120e3),(18000,0.131e3),(19000,0.142e3),(20000,0.154e3)])]
        
nTable = [(5,[(2000,18.34),(3000,12.23),(4000,9.17),(5000,7.35),(6000,6.12),(7000,5.24),(8000,4.55),(9000,3.97),(10000,3.43),(11000,2.88),(12000,2.37),(13000,1.93),(14000,1.60),(15000,1.38),(16000,1.23),(17000,1.12),(18000,1.04),(19000,0.96),(20000,0.88)]),
          (15,[(2000,55.03),(3000,36.69),(4000,27.50),(5000,22.05),(6000,18.37),(7000,15.71),(8000,13.71),(9000,12.04),(10000,10.56),(11000,9.17),(12000,7.79),(13000,6.47),(14000,5.43),(15000,4.59),(16000,4.00),(17000,3.57),(18000,3.25),(19000,2.96),(20000,2.69)]),
          (25,[(2000,91.71),(3000,61.14),(4000,45.86),(5000,36.75),(6000,30.62),(7000,26.23),(8000,22.87),(9000,20.15),(10000,17.77),(11000,15.53),(12000,13.36),(13000,11.32),(14000,9.52),(15000,8.07),(16000,6.99),(17000,6.22),(18000,5.64),(19000,5.19),(20000,4.81)])]        

logTable = map (\x -> (fst x, map (\y -> ({-log$-}fst y,log$snd y)) (snd x)))
          
nLogTable =logTable nTable

sigmaLogTable = logTable sigmaTable		  

interpolate :: Double -> [(Double,Double)] -> Double
interpolate x l =  (x-x1)*(y2-y1)/(x2-x1) + y1
    where x1 = fst$fst nods
          x2 = fst$snd nods
          y1 = snd$fst nods
          y2 = snd$snd nods
          nods = srch l
          srch (x1:x2:[]) = (x1,x2)
          srch (x1:x2:xs) | x < fst x2 = (x1,x2)
                          | otherwise = srch (x2:xs)
                          
logTableT :: Double -> [(Double,[(Double,Double)])] -> [(Double,Double)]
logTableT t table =  map (\x -> ({-exp$-}fst x,exp (interpolate ({-log-} t) (snd x)))) table                         
                          
ntT :: Double -> [(Double,Double)] -- На вход T - на выход таблица зависимости от P
ntT t = logTableT t nLogTable

sigmaT t = logTableT t sigmaLogTable 

nt :: Double -> Double -> Double
nt p t = interpolate p (ntT t) 

sigma :: Double ->  Double -> Double
sigma p t = interpolate p (sigmaT t) 

t0 :: Double -> Double
t0 i = interpolate i t0Table

m :: Double -> Double
m i = interpolate i mTable